//  Copyright 2017 Palantir Technologies, Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

//! Annotations.
use std::time::SystemTime;

use endpoint::Endpoint;

/// An `Annotation` represents an occurence of an event at some time.
///
/// It consists of a timestamp, a string description of the event, and an
/// optional `Endpoint` identifying the service in which the event ocurred.
/// `Annotation`s are attached to a `Span`.
///
/// Zipkin defines a number of "standard" event values:
///
/// * `cs` - "Client Sent": Generated by a client when it sends a request to a
///     remote service.
/// * `sr` - "Server Receive": Generated by a server when it has received a
///     request from a client.
/// * `ss` - "Server Sent": Generated by a server when it has finished
///     processing a request and has sent the request back to the client.
/// * `cr` - "Client Receive": Generated by a client when it has received the
///     server's response to a request.
///
/// Arbitrary user-defined values can also be used.
#[derive(Debug, Clone)]
#[cfg_attr(feature = "serde", derive(Serialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "camelCase"))]
pub struct Annotation {
    #[cfg_attr(feature = "serde", serde(serialize_with = "::time_micros"))]
    timestamp: SystemTime,
    value: String,
    #[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
    endpoint: Option<Endpoint>,
}

impl Annotation {
    /// Returns a new builder used to construct an `Annotation`.
    pub fn builder() -> Builder {
        Builder {
            timestamp: None,
            endpoint: None,
        }
    }

    /// Returns the time at which the annotated event occurred.
    pub fn timestamp(&self) -> SystemTime {
        self.timestamp
    }

    /// Returns the value of the annotation.
    pub fn value(&self) -> &str {
        &self.value
    }

    /// Returns the endpoint on which the annotated event occurred.
    pub fn endpoint(&self) -> Option<&Endpoint> {
        self.endpoint.as_ref()
    }
}

/// A builder for `Annotation`s.
pub struct Builder {
    timestamp: Option<SystemTime>,
    endpoint: Option<Endpoint>,
}

impl Builder {
    /// Sets the time at which the annotated event occurred.
    ///
    /// Defaults to the time at which `build` is called.
    pub fn timestamp(&mut self, timestamp: SystemTime) -> &mut Builder {
        self.timestamp = Some(timestamp);
        self
    }

    /// Sets the endpoint associated with the annotated event.
    ///
    /// Defaults to `None`.
    pub fn endpoint(&mut self, endpoint: Endpoint) -> &mut Builder {
        self.endpoint = Some(endpoint);
        self
    }

    /// Constructs the `Annotation`.
    pub fn build(&mut self, value: &str) -> Annotation {
        Annotation {
            timestamp: self.timestamp.unwrap_or_else(SystemTime::now),
            value: value.to_string(),
            endpoint: self.endpoint.take(),
        }
    }
}
